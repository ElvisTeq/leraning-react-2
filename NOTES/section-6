#1
Setting Dinamic Inline Styles

- Using "useState(true/fasle)"
* To set "style={{color}}" based on true or false
* Implemented in => "CourseInput.js"

------------------------------------------ {props.children}
- Will be anything added as "textContent" in the component JSX

____________________________________________________________________________________________________
#2
Setting CSS Classes Dynamically

* Implemented in "CourseInput.js"

------------------------------------------ .form-control.invalid input {styles}
------------------------------------------ .form-control.invalid label {styles}
- <div className={'form-control invalid'}></div>
* <label> and <input> insite the "div" will contain all the {styles}
* by adding "invalid" to => className={'form-control invalid'}

____________________________________________________________________________________________________
#3
Introducing Styled Components

* Implemented in "Button.js"

* styled-components.com
- Package to build CSS.styles that can only be used on its attached components

------------------------------------------ npm i --save styled-components

------------------------------------------ import styled from 'styled-components'

------------------------------------------ styled.HTMLElement`CSS.styles`
- Using "styled" method
Ex => "Button.js"

____________________________________________________________________________________________________
#4
Styled Components & Dynamic props

Implemented in "CourseInput.js"

*Methods

1) <FormControl className={!isValid && "invalid"}>
- Using "true/false" to add ".invalid" class

2) <FormControl invalid={!isValid}>
- Using "props" inside the CSS-style values
Ex => ${props => props.isvalid ? 'red' : 'black'}
